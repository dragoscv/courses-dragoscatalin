import React from 'react';
import Head from 'next/head'
import Image from 'next/image'
import Router from 'next/router';
import { getAuth, signInAnonymously, onAuthStateChanged } from "firebase/auth";
import { getFirestore, addDoc, setDoc, doc, collection, getDoc, getDocs, orderBy } from "firebase/firestore";
import { app } from '../../firebase.config';
import Rating from '@mui/material/Rating';
import Box from '@mui/material/Box';
import StarIcon from '@mui/icons-material/Star';

const auth = getAuth(app);
const db = getFirestore(app);

const labels = {
  0.5: 'Useless',
  1: 'Useless+',
  1.5: 'Poor',
  2: 'Poor+',
  2.5: 'Ok',
  3: 'Ok+',
  3.5: 'Good',
  4: 'Good+',
  4.5: 'Excellent',
  5: 'Excellent+',
};

function getLabelText(value) {
  return `${value} Star${value !== 1 ? 's' : ''}, ${labels[value]}`;
}

export default function Courses() {
  const [courses, setCourses] = React.useState([]);
  const [hover, setHover] = React.useState(-1);

  React.useEffect(() => {
    const getCourses = async () => {
      const coursesArray = [];
      const queryCourses = await getDocs(collection(db, "courses"), orderBy("lastUpdated", "desc"));
      const queryTransactions = await getDocs(collection(db, "transactions"));

      for (const course of queryCourses.docs) {
        const data = course.data();
        data.id = course.id;
        const studentsCount = queryTransactions.docs.filter((transaction) => transaction.data().courseId === data.id).length;
        data.studentsCount = studentsCount;
        //query lessons count lessons for each course
        const queryLessons = await getDocs(collection(db, `courses/${data.id}/lessons`));
        // console.log(queryLessons.size);
        data.lessonsCount = queryLessons.size;
        //query reviews count reviews for each course
        const queryReviews = await getDocs(collection(db, `courses/${data.id}/reviews`));
        let totalRating = 0;
        for (const review of queryReviews.docs) {
          totalRating += review.data().rating;
        }
        data.averageRating = queryReviews.size > 0 ? totalRating / queryReviews.size : 0;
        console.log(data);
        coursesArray.push(data);
      }
      // console.log(courses);
      //order coursesArray by lastUpdated
      coursesArray.sort((a, b) => b.lastUpdated - a.lastUpdated);
      setCourses(coursesArray);
    };
    getCourses();
  }, []);

  return (
    <div className="container px-4">
      <Head>
        <title>daam.ro - Cursuri Online</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/assets/logo/logo-daam-white.svg" />
      </Head>


      <main className="py-6">
        <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
          {courses.map((course) => (
            <div key={course.id} className="relative cursor-pointer overflow-hidden transition-all transform bg-white rounded-lg shadow-sm dark:bg-gray-800 hover:scale-105 w-full"
              onClick={() => Router.push(`/course/${course.id}`)}
            >
              <img className="object-cover w-full h-56" src={course.image} alt="" />
              <div className="p-4">
                <h4 className="mb-2 text-lg font-semibold text-gray-800 dark:text-gray-300">
                  {course.title}
                </h4>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  <div id="lesson-content" dangerouslySetInnerHTML={{ __html: course.description.length > 100 ? course.description.substring(0, 100) + '...' : course.description }}></div>
                </p>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  Categorie: {course.category}
                </p>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  {course.studentsCount} studenti
                </p>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  Instructor: {course.instructor}
                </p>
                {course && course.lastUpdate && (
                  <p className="text-sm text-gray-600 dark:text-gray-400">
                    Ultima actualizare: {course.lastUpdate.toDate().toLocaleDateString()}
                  </p>
                )}
                <div className="absolute bottom-0 right-0 px-2 py-1 m-4 text-lg font-semibold text-gray-100 bg-green-500 rounded-lg">
                  {course.price} {course.currency}
                </div>
                <div className="absolute top-0 right-0 px-2 py-1 m-4 text-lg font-semibold text-gray-100 bg-green-500 rounded-lg">
                  {course.lessonsCount} lec»õii

                </div>
                {course.averageRating > 0 && (
                  <div className="absolute top-40 right-0 px-2 py-1 m-4 text-lg font-semibold bg-gray-800 rounded-lg">
                    <Rating
                      name="hover-feedback"
                      value={course.averageRating}
                      precision={0.5}
                      readOnly
                      emptyIcon={<StarIcon style={{ opacity: 0.55 }} fontSize="inherit" />}
                    />
                    
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      </main>


      <footer className="flex px-2 border-t-2 border-gray-500 justify-center items-center">
        Made with love by &nbsp;<a
          href="https://dragoscatalin.ro"
          target="_blank"
          rel="noopener noreferrer"
          className='text-blue-500 decoration-none'
        >
          {' Dragos Catalin '}
        </a>
      </footer>
    </div>
  )
}
